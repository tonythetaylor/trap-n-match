{"ast":null,"code":"import _classCallCheck from \"/Users/TonyTheTaylor/Dev/trap-n-match/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/TonyTheTaylor/Dev/trap-n-match/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n// import shuffle from 'shuffle-array';\nfunction shuffle(array) {\n  var i = 0,\n      j = 0,\n      temp = null;\n\n  for (i = array.length - 1; i > 0; i -= 1) {\n    j = Math.floor(Math.random() * (i + 1));\n    temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n}\n\nvar MemoryCards =\n/*#__PURE__*/\nfunction () {\n  function MemoryCards() {\n    _classCallCheck(this, MemoryCards);\n\n    this.cards = [];\n    this.NUM_IMAGES = 10;\n  }\n\n  _createClass(MemoryCards, [{\n    key: \"generateCardSet\",\n    value: function generateCardSet() {\n      //\n      // Generate a set of cards with image pairs\n      //\n      this.cards = [];\n      var id = 1;\n\n      for (var i = 1; i <= this.NUM_IMAGES; i++) {\n        var card1 = {\n          id: id,\n          image: i,\n          imageUp: false,\n          matched: false\n        };\n        id++;\n        var card2 = {\n          id: id,\n          image: i,\n          imageUp: false,\n          matched: false\n        };\n        this.cards.push(card1);\n        this.cards.push(card2);\n        id++;\n      } // Randomize the card set\n\n\n      shuffle(this.cards);\n    }\n  }, {\n    key: \"getCard\",\n    value: function getCard(id) {\n      for (var i = 0; i < 2 * this.NUM_IMAGES; i++) {\n        if (this.cards[i].id === id) {\n          return this.cards[i];\n        }\n      }\n\n      ;\n    }\n  }, {\n    key: \"flipCard\",\n    value: function flipCard(id, imageUp) {\n      this.getCard(id).imageUp = imageUp;\n    }\n  }, {\n    key: \"setCardAsMatched\",\n    value: function setCardAsMatched(id, matched) {\n      this.getCard(id).matched = matched;\n    }\n  }, {\n    key: \"cardsHaveIdenticalImages\",\n    value: function cardsHaveIdenticalImages(id1, id2) {\n      if (this.getCard(id1).image === this.getCard(id2).image) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }]);\n\n  return MemoryCards;\n}();\n\n;\nexport default MemoryCards;","map":{"version":3,"sources":["/Users/TonyTheTaylor/Dev/trap-n-match/src/js/components/Cards/Cards.jsx"],"names":["shuffle","array","i","j","temp","length","Math","floor","random","MemoryCards","cards","NUM_IMAGES","id","card1","image","imageUp","matched","card2","push","getCard","id1","id2"],"mappings":";;;AAAA;AAEA,SAASA,OAAT,CAAiBC,KAAjB,EAAwB;AACpB,MAAIC,CAAC,GAAG,CAAR;AAAA,MACIC,CAAC,GAAG,CADR;AAAA,MAEIC,IAAI,GAAG,IAFX;;AAIA,OAAKF,CAAC,GAAGD,KAAK,CAACI,MAAN,GAAe,CAAxB,EAA2BH,CAAC,GAAG,CAA/B,EAAkCA,CAAC,IAAI,CAAvC,EAA0C;AACxCC,IAAAA,CAAC,GAAGG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBN,CAAC,GAAG,CAArB,CAAX,CAAJ;AACAE,IAAAA,IAAI,GAAGH,KAAK,CAACC,CAAD,CAAZ;AACAD,IAAAA,KAAK,CAACC,CAAD,CAAL,GAAWD,KAAK,CAACE,CAAD,CAAhB;AACAF,IAAAA,KAAK,CAACE,CAAD,CAAL,GAAWC,IAAX;AACD;AACF;;IAEGK,W;;;AACJ,yBAAc;AAAA;;AACZ,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACD;;;;sCAEiB;AAChB;AACA;AACA;AACA,WAAKD,KAAL,GAAa,EAAb;AACA,UAAIE,EAAE,GAAC,CAAP;;AACA,WAAI,IAAIV,CAAC,GAAC,CAAV,EAAaA,CAAC,IAAI,KAAKS,UAAvB,EAAmCT,CAAC,EAApC,EAAwC;AACtC,YAAIW,KAAK,GAAG;AACVD,UAAAA,EAAE,EAAEA,EADM;AAEVE,UAAAA,KAAK,EAAGZ,CAFE;AAGVa,UAAAA,OAAO,EAAE,KAHC;AAIVC,UAAAA,OAAO,EAAE;AAJC,SAAZ;AAMAJ,QAAAA,EAAE;AACF,YAAIK,KAAK,GAAG;AACVL,UAAAA,EAAE,EAAEA,EADM;AAEVE,UAAAA,KAAK,EAAGZ,CAFE;AAGVa,UAAAA,OAAO,EAAE,KAHC;AAIVC,UAAAA,OAAO,EAAE;AAJC,SAAZ;AAMA,aAAKN,KAAL,CAAWQ,IAAX,CAAgBL,KAAhB;AACA,aAAKH,KAAL,CAAWQ,IAAX,CAAgBD,KAAhB;AACAL,QAAAA,EAAE;AACH,OAvBe,CAyBhB;;;AACAZ,MAAAA,OAAO,CAAC,KAAKU,KAAN,CAAP;AACD;;;4BAEOE,E,EAAI;AACV,WAAI,IAAIV,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAG,IAAE,KAAKS,UAAxB,EAAoCT,CAAC,EAArC,EAAyC;AACvC,YAAI,KAAKQ,KAAL,CAAWR,CAAX,EAAcU,EAAd,KAAqBA,EAAzB,EAA6B;AAC3B,iBAAO,KAAKF,KAAL,CAAWR,CAAX,CAAP;AACD;AACF;;AAAA;AACF;;;6BAEQU,E,EAAIG,O,EAAS;AACpB,WAAKI,OAAL,CAAaP,EAAb,EAAiBG,OAAjB,GAA2BA,OAA3B;AACD;;;qCAEgBH,E,EAAII,O,EAAS;AAC5B,WAAKG,OAAL,CAAaP,EAAb,EAAiBI,OAAjB,GAA2BA,OAA3B;AACD;;;6CAEwBI,G,EAAKC,G,EAAK;AACjC,UAAI,KAAKF,OAAL,CAAaC,GAAb,EAAkBN,KAAlB,KAA4B,KAAKK,OAAL,CAAaE,GAAb,EAAkBP,KAAlD,EAAyD;AACvD,eAAO,IAAP;AACD,OAFD,MAEO;AACL,eAAO,KAAP;AACD;AACF;;;;;;AAEF;AAED,eAAeL,WAAf","sourcesContent":["// import shuffle from 'shuffle-array';\n\nfunction shuffle(array) {\n    var i = 0\n      , j = 0\n      , temp = null\n  \n    for (i = array.length - 1; i > 0; i -= 1) {\n      j = Math.floor(Math.random() * (i + 1))\n      temp = array[i]\n      array[i] = array[j]\n      array[j] = temp\n    }\n  }\n  \nclass MemoryCards {\n  constructor() {\n    this.cards = [];\n    this.NUM_IMAGES = 10;\n  }\n\n  generateCardSet() {\n    //\n    // Generate a set of cards with image pairs\n    //\n    this.cards = [];\n    let id=1;\n    for(let i=1; i <= this.NUM_IMAGES; i++) {\n      let card1 = {\n        id: id,\n        image : i,\n        imageUp: false,\n        matched: false\n      };\n      id++;\n      let card2 = {\n        id: id,\n        image : i,\n        imageUp: false,\n        matched: false\n      };\n      this.cards.push(card1);\n      this.cards.push(card2);\n      id++;\n    }\n\n    // Randomize the card set\n    shuffle(this.cards);  \n  }\n\n  getCard(id) {\n    for(let i=0; i < 2*this.NUM_IMAGES; i++) {\n      if (this.cards[i].id === id) {\n        return this.cards[i];\n      }\n    };\n  }\n\n  flipCard(id, imageUp) {\n    this.getCard(id).imageUp = imageUp;\n  }\n\n  setCardAsMatched(id, matched) {\n    this.getCard(id).matched = matched;\n  }\n\n  cardsHaveIdenticalImages(id1, id2) {\n    if (this.getCard(id1).image === this.getCard(id2).image) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n};\n\nexport default MemoryCards;"]},"metadata":{},"sourceType":"module"}