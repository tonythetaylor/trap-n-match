{"ast":null,"code":"import _classCallCheck from \"/Users/TonyTheTaylor/Dev/trap-n-match/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/TonyTheTaylor/Dev/trap-n-match/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/TonyTheTaylor/Dev/trap-n-match/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/TonyTheTaylor/Dev/trap-n-match/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/TonyTheTaylor/Dev/trap-n-match/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/TonyTheTaylor/Dev/trap-n-match/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/TonyTheTaylor/Dev/trap-n-match/src/js/components/Game/Game.jsx\";\nimport React, { Component } from \"react\";\nimport './Game.css';\nimport CardView from '../CardView/CardView';\nimport Cards from '../Cards/Cards';\n\nvar Game =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Game, _Component);\n\n  function Game(props) {\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Game).call(this, props));\n    _this.onCardClicked = _this.onCardClicked.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onPlayAgain = _this.onPlayAgain.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.memoryCards = new Cards();\n    return _this;\n  }\n\n  _createClass(Game, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.initGame();\n    }\n  }, {\n    key: \"initGame\",\n    value: function initGame() {\n      this.memoryCards.generateCardSet();\n      this.setState({\n        turnNo: 1,\n        pairsFound: 0,\n        numClicksWithinTurn: 0,\n        firstId: undefined,\n        secondId: undefined\n      });\n    }\n  }, {\n    key: \"getCardViews\",\n    value: function getCardViews() {\n      var cardViews = [];\n      var onClick = this.onCardClicked;\n      this.memoryCards.cards.forEach(function (c) {\n        console.warn(\"DEBUGG: \", c);\n        var cardView = React.createElement(CardView, {\n          key: c.id,\n          id: c.id,\n          image: c.image,\n          imageUp: c.imageUp,\n          matched: c.matched,\n          onClick: onClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        });\n        cardViews.push(cardView);\n      });\n      return cardViews;\n    }\n  }, {\n    key: \"clearCards\",\n    value: function clearCards(id1, id2) {\n      if (this.state.numClicksWithinTurn !== 2) {\n        return;\n      }\n\n      this.memoryCards.flipCard(this.state.firstId, false);\n      this.memoryCards.flipCard(this.state.secondId, false);\n      this.setState({\n        firstId: undefined,\n        secondId: undefined,\n        numClicksWithinTurn: 0,\n        turnNo: this.state.turnNo + 1\n      });\n    }\n  }, {\n    key: \"onCardClicked\",\n    value: function onCardClicked(id, image) {\n      var _this2 = this;\n\n      if (this.state.numClicksWithinTurn === 0 || this.state.numClicksWithinTurn === 2) {\n        if (this.state.numClicksWithinTurn === 2) {\n          clearTimeout(this.timeout);\n          this.clearCards(this.state.firstId, this.state.secondId);\n        }\n\n        this.memoryCards.flipCard(id, true);\n        this.setState({\n          firstId: id,\n          numClicksWithinTurn: 1\n        });\n      } else if (this.state.numClicksWithinTurn === 1) {\n        this.memoryCards.flipCard(id, true);\n        this.setState({\n          secondId: id,\n          numClicksWithinTurn: 2\n        });\n\n        if (this.memoryCards.cardsHaveIdenticalImages(id, this.state.firstId)) {\n          this.memoryCards.setCardAsMatched(this.state.firstId, true);\n          this.memoryCards.setCardAsMatched(id, true);\n          this.setState({\n            pairsFound: this.state.pairsFound + 1,\n            firstId: undefined,\n            secondId: undefined,\n            turnNo: this.state.turnNo + 1,\n            numClicksWithinTurn: 0\n          });\n        } else {\n          this.timeout = setTimeout(function () {\n            _this2.clearCards(_this2.state.firstId, _this2.state.secondId);\n          }, 500);\n        }\n      }\n    }\n  }, {\n    key: \"onPlayAgain\",\n    value: function onPlayAgain() {\n      this.initGame();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var cardViews = this.getCardViews();\n      var gameStatus = React.createElement(\"div\", {\n        className: \"Game-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"Turn: \", this.state.turnNo), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"Pairs found: \", this.state.pairsFound));\n\n      if (this.state.pairsFound === this.memoryCards.NUM_IMAGES) {\n        gameStatus = React.createElement(\"div\", {\n          className: \"Game-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, \"GAME COMPLETE!\"), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, \"You used \", this.state.turnNo - 1, \" turns\"), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          onClick: this.onPlayAgain,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, \"Play again?\")));\n      }\n\n      return React.createElement(\"div\", {\n        className: \"Game\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"Game-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"Game-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"TRAP ~n~ MATCH\")), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, gameStatus), React.createElement(\"div\", {\n        className: \"CardContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, cardViews));\n    }\n  }]);\n\n  return Game;\n}(Component);\n\nexport default Game;","map":{"version":3,"sources":["/Users/TonyTheTaylor/Dev/trap-n-match/src/js/components/Game/Game.jsx"],"names":["React","Component","CardView","Cards","Game","props","onCardClicked","bind","onPlayAgain","memoryCards","initGame","generateCardSet","setState","turnNo","pairsFound","numClicksWithinTurn","firstId","undefined","secondId","cardViews","onClick","cards","forEach","c","console","warn","cardView","id","image","imageUp","matched","push","id1","id2","state","flipCard","clearTimeout","timeout","clearCards","cardsHaveIdenticalImages","setCardAsMatched","setTimeout","getCardViews","gameStatus","NUM_IMAGES"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport './Game.css';\nimport CardView from '../CardView/CardView';\nimport Cards from '../Cards/Cards';\n\n  class Game extends Component {\n\n    constructor(props) {\n      super(props);\n      this.onCardClicked = this.onCardClicked.bind(this);\n      this.onPlayAgain = this.onPlayAgain.bind(this);\n      this.memoryCards = new Cards();\n    }\n\n    componentWillMount() {\n      this.initGame();\n    }\n  \n    initGame() {\n      this.memoryCards.generateCardSet();\n      this.setState({\n        turnNo : 1,\n        pairsFound : 0,\n        numClicksWithinTurn : 0,\n        firstId : undefined,\n        secondId : undefined\n      });\n    }\n  \n    getCardViews() {\n      let cardViews = [];\n      let onClick = this.onCardClicked;\n      this.memoryCards.cards.forEach(c => {\n        console.warn(\"DEBUGG: \", c)\n        let cardView = <CardView key={c.id} \n            id={c.id} \n            image={c.image}\n            imageUp = {c.imageUp}\n            matched = {c.matched} \n            onClick={onClick}/>;\n            cardViews.push(cardView);\n      });\n      return cardViews;\n    }\n  \n    clearCards(id1,id2) {\n      if (this.state.numClicksWithinTurn !== 2) {\n        return;\n      }\n      this.memoryCards.flipCard(this.state.firstId, false);\n      this.memoryCards.flipCard(this.state.secondId, false);\n      this.setState({\n        firstId: undefined,\n        secondId: undefined,\n        numClicksWithinTurn: 0,\n        turnNo : this.state.turnNo+1\n      });\n    }\n  \n    onCardClicked(id,image) {\n      if (this.state.numClicksWithinTurn === 0 || this.state.numClicksWithinTurn === 2) {\n        if (this.state.numClicksWithinTurn === 2) {\n          clearTimeout(this.timeout);\n          this.clearCards(this.state.firstId, this.state.secondId);        \n        }\n        this.memoryCards.flipCard(id, true);\n        this.setState({\n          firstId : id,\n          numClicksWithinTurn : 1\n        });\n      } else if (this.state.numClicksWithinTurn === 1) {\n        this.memoryCards.flipCard(id, true);\n        this.setState({\n          secondId : id,\n          numClicksWithinTurn : 2\n        });\n  \n        if (this.memoryCards.cardsHaveIdenticalImages(id, this.state.firstId)) {\n          this.memoryCards.setCardAsMatched(this.state.firstId, true);\n          this.memoryCards.setCardAsMatched(id, true);\n          this.setState({\n            pairsFound: this.state.pairsFound+1,\n            firstId: undefined,\n            secondId: undefined,\n            turnNo : this.state.turnNo+1,\n            numClicksWithinTurn: 0\n          });\n  \n        } else {\n          this.timeout = setTimeout(() => { \n            this.clearCards(this.state.firstId, this.state.secondId);\n          },500); \n        }\n  \n      }\n    }\n  \n    onPlayAgain() {\n      this.initGame();\n    }\n  \n    render() {\n      let cardViews = this.getCardViews();\n      let gameStatus = <div className='Game-title'>\n                        <div>Turn: {this.state.turnNo}</div>\n                        <div>Pairs found: {this.state.pairsFound}</div>\n                      </div>;\n  \n      if (this.state.pairsFound === this.memoryCards.NUM_IMAGES) {\n        gameStatus = <div className='Game-title'>\n                      <div>GAME COMPLETE!</div>\n                      <div>You used {this.state.turnNo-1} turns</div>\n                      <div><button onClick={this.onPlayAgain}>Play again?</button></div></div>;      \n      }\n  \n      return (\n        <div className='Game'>\n          <header className='Game-header'>\n            <div className='Game-title'>TRAP ~n~ MATCH</div>\n          </header>\n          <div>\n            {gameStatus}\n          </div>\n          <div className='CardContainer'>\n            {cardViews}\n          </div>\n        </div>\n      );\n    }\n  }\n\n  export default Game;"]},"metadata":{},"sourceType":"module"}